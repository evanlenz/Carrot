<?xml version="1.0"?>
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 |                                                                           |
 | YAPP XSLT is published under the GNU General Public Licence               |
 |   (see http://www.gnu.org/licenses/licenses.html#GPL).                    |
 |                                                                           |
 | A copy of the licence agreement (gpl.txt) must be part of any             |
 |   redistribution of any form.                                             |
 |                                                                           |
 | YAPP XSLT was created by Martin Klang <mars@pingdynasty.com>.             |
 |                                                                           |
 | For usage instructions and more information about YAPP XSLT please see:   |
 |   http://www.o-xml.org/yapp/                                              |
 |                                                                           |
 +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<grammar>

  <!-- quoted string literals -->
  <terminal name="literal">
    <delimited>
      <begin>'</begin>
      <end>'</end>
    </delimited>
    <delimited>
      <begin>"</begin>
      <end>"</end>
    </delimited>
  </terminal>

  <!-- node test -->
  <terminal name="processingInstruction">
    <delimited>
      <begin>processing-instruction(</begin>
      <end>)</end>
    </delimited>
  </terminal>

  <terminal name="end">
    <end/>
  </terminal>

  <ignore char=" "/>

  <bnf>


      Expr            ::= ExprSingle CommaExprSingle;<!-- end;-->

      CommaExprSingle ::= comma ExprSingle CommaExprSingle | ;

  comma ::= ',' ;

      ExprSingle     ::=      FLWORExpr | QuantifiedExpr | TypeswitchExpr | literal; <!-- FIXME -->
      <!--
      ExprSingle     ::=      FLWORExpr
| QuantifiedExpr
| TypeswitchExpr
| IfExpr
| OrExpr;
-->

QuantifiedExpr ::= SomeOrEvery QuantifiedVarBinding NextQuantifiedVarBindingsOpt satisfies ExprSingle;
dummy ::= "dummy";
satisfies ::= "satisfies";
SomeOrEvery ::= some | every;
some ::= "some";
every ::= "every";
QuantifiedVarBinding ::= dollar VarName TypeDeclarationOpt in ExprSingle;

NextQuantifiedVarBindingsOpt ::= NextQuantifiedVarBindings | ;
NextQuantifiedVarBindings ::= NextQuantifiedVarBindings NextQuantifiedVarBinding | NextQuantifiedVarBinding;
NextQuantifiedVarBinding ::= comma QuantifiedVarBinding;


TypeswitchExpr ::= typeswitch lparen Expr rparen CaseClauseList default DollarVarNameOpt return ExprSingle;
typeswitch ::= "typeswitch";
default ::= "default";

CaseClauseList ::= CaseClauseList CaseClause | CaseClause;
CaseClause ::= case DollarVarNameAsOpt SequenceType return ExprSingle;
case ::= "case";
DollarVarNameAsOpt ::= DollarVarNameAs | ;
DollarVarNameAs ::= dollar VarName as;

DollarVarNameOpt ::= DollarVarName | ;
DollarVarName ::= dollar VarName;



FLWORExpr      ::=  ForLetClauses WhereClauseOpt OrderByClauseOpt return ExprSingle;



ForLetClauses ::= ForLetClauses ForLetClause | ForLetClause;
ForLetClause ::= ForClause | LetClause;
WhereClauseOpt ::= WhereClause | ;

ForClause ::= for VarBinding NextForBindingsOpt;
VarBinding ::= dollar VarName TypeDeclarationOpt PositionalVarOpt in ExprSingle;
LetClause ::= let LetBinding NextLetBindingsOpt;

LetBinding ::= dollar VarName TypeDeclarationOpt bindingop ExprSingle;
bindingop ::= ":=";


WhereClause ::= where ExprSingle;
VarName ::= QName;

for ::= 'for';
let ::= 'let';
return ::= 'return';
where ::= 'where';
dollar ::= '$';
in ::= 'in';

TypeDeclarationOpt ::= TypeDeclaration | ;
TypeDeclaration ::= as SequenceType;

SequenceType ::= EmptySequence | ItemTypeSequence;

EmptySequence ::= empty-sequence lparen rparen;
empty-sequence ::= 'empty-sequence';
lparen ::= '(';
rparen ::= ')';

ItemTypeSequence ::= ItemType OccurrenceIndicatorOpt;
ItemType ::= KindTest | itemparens | AtomicType ;
AtomicType ::= QName;
KindTest ::= 
  DocumentTest
| ElementTest
| AttributeTest
| SchemaElementTest
| SchemaAttributeTest
| PITest
| CommentTest
| TextTest
| AnyKindTest;

itemparens ::= item lparen rparen;
item ::= "item";

 <!--FIXME-->
 DocumentTest ::= document-node lparen ElementOrSchemaElementTestOpt rparen;
 document-node ::= "document-node";
 ElementOrSchemaElementTestOpt ::= ElementOrSchemaElementTest | ;
 ElementOrSchemaElementTest ::= ElementTest | SchemaElementTest;
 ElementTest ::= element lparen ElementAndTypeOpt rparen;
 ElementAndTypeOpt ::= ElementAndType | ;
 ElementAndType ::= ElementNameOrWildcard CommaTypeNameOpt;
 ElementNameOrWildcard ::= ElementName | asterisk;
 ElementName ::= QName;
 CommaTypeNameOpt ::= CommaTypeName | ;
 CommaTypeName ::= comma TypeName QuestionMarkOpt;
 QuestionMarkOpt ::= questionmark | ;
 TypeName ::= QName;

 element ::= 'element';

 SchemaElementTest ::= schema-element lparen ElementDeclaration rparen;
 schema-element ::= 'schema-element';
 ElementDeclaration ::= ElementName;

 AttributeTest ::= attribute lparen AttributeAndTypeOpt rparen;
 AttributeAndTypeOpt ::= AttributeAndType | ;
 AttributeAndType ::= AttribNameOrWildcard AttCommaTypeNameOpt;
 AttCommaTypeNameOpt ::= AttCommaTypeName | ;
 AttCommaTypeName ::= comma TypeName;
 AttribNameOrWildcard ::= AttributeName | asterisk;
 AttributeName ::= QName;

 attribute ::= 'attribute';
 SchemaAttributeTest ::= schema-attribute lparen AttributeDeclaration rparen;
 schema-attribute ::= "schema-attribute";
 AttributeDeclaration ::= AttributeName;

 PITest ::= processing-instruction lparen NCNameOrStringLiteralOpt rparen;
 processing-instruction ::= "processing-instruction";
 NCNameOrStringLiteralOpt ::= NCNameOrStringLiteral | ;
 NCNameOrStringLiteral ::= ncname | StringLiteral;
 StringLiteral ::= literal; <!-- for now -->

 CommentTest ::= comment lparen rparen;
 comment ::= "comment";

 TextTest ::= text lparen rparen;
 text ::= "text";

 AnyKindTest ::= node lparen rparen;
 node ::= "node";

OccurrenceIndicatorOpt ::= OccurrenceIndicator | ;
OccurrenceIndicator ::= questionmark | asterisk | plus;
questionmark ::= "?";
asterisk ::= "*";
plus ::= "+";

as ::= 'as';

PositionalVarOpt ::= PositionalVar | ;
PositionalVar ::= at dollar QName;
at ::= 'at';

OrderByClauseOpt ::= OrderByClause | ;
      OrderByClause      ::= OrderByFlavor OrderSpecList;
      OrderByFlavor      ::= OrderBy | StableOrderBy;
      OrderBy            ::= order by;
          order ::= 'order';
          by ::= 'by';
      StableOrderBy      ::= stable order by;
          stable ::= 'stable';
      OrderSpecList      ::= OrderSpec CommaOrderSpecListOpt; <!--("," OrderSpec)*;-->
      CommaOrderSpecListOpt ::= CommaOrderSpecList | ;
      CommaOrderSpecList ::= CommaOrderSpecList | CommaOrderSpec; 
      CommaOrderSpec  ::= comma OrderSpec;
      OrderSpec     ::= ExprSingle OrderModifier;

      OrderModifier ::= AscendingOrDescendingOpt EmptyGreatestLeastOpt CollationSpecOpt;
      AscendingOrDescendingOpt ::= AscendingOrDescending | ;
      EmptyGreatestLeastOpt ::= EmptyGreatestLeast | ;
      CollationSpecOpt ::= CollationSpec | ;

      AscendingOrDescending ::= ascending | descending;
      ascending ::= "ascending";
      descending ::= "descending";

      EmptyGreatestLeast ::= empty GreatestOrLeast;
      empty ::= "empty";
      GreatestOrLeast ::= greatest | least;
      greatest ::= "greatest";
      least ::= 'least';

      CollationSpec ::= collation URILiteralOpt;
      collation ::= "collation";
      URILiteralOpt ::= URILiteral | ;
      URILiteral ::= StringLiteral;


NextForBindingsOpt ::= NextForBindings | ;
NextForBindings ::= NextForBindings NextForBinding | NextForBinding;
NextForBinding ::= comma VarBinding;

NextLetBindingsOpt ::= NextLetBindings | ;
NextLetBindings ::= NextLetBindings NextLetBinding | NextLetBinding;
NextLetBinding ::= comma LetBinding;


ncname ::= [1234567890_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-];
colon ::= ':';

QName ::= PrefixedName | UnprefixedName;
PrefixedName ::= Prefix colon LocalPart;
UnprefixedName ::= LocalPart;
Prefix ::= ncname;
LocalPart ::= ncname;





  </bnf>

  <import href="xquery-lexer.xsl"/>

  <!--
  <import href="xpath-templates.xsl"/>
  -->

  <!-- For reference only (from the sample simplified XPath 1.0 BNF)
  ncname ::= [1234567890_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#-];

  slash ::= '/' ;

  slashslash ::= '//' ;

  dot ::= '.' ;

  dotdot ::= '..' ;

  at ::= '@' ;

  colon ::= ':' ;

  lparen ::= '(' ;

  rparen ::= ')' ;

  lbrack ::= '[' ;

  rbrack ::= ']' ;

  asterisk ::= '*' ;

  <!- - logical operators - ->

  or ::= 'or' ;

  and ::= 'and' ;

  <!- - arithmetical operators - ->

  div ::= 'div' ;

  mod ::= 'mod' ;

  minus ::= '-' ;

  plus ::= '+' ;

  <!- - equality operators - ->

  equalityOperator ::= '=' | '!=' ;

  <!- - relational operators - ->

  relationalOperator ::= '&lt;' | '&lt;=' | '&gt;' | '&gt;=' ;

  axisName ::= 'ancestor::'
             | 'ancestor-or-self::'
             | 'attribute::'
             | 'child::'
             | 'descendant::'
             | 'descendant-or-self::'
             | 'following::'
             | 'following-sibling::'
             | 'namespace::'
             | 'parent::'
             | 'preceding::'
             | 'preceding-sibling::'
             | 'self::' ;

  <!- - node tests - ->

  comment ::= 'comment()' ;
  text ::= 'text()' ;
  node ::= 'node()' ;


  <!- - non-terminals - ->

  <!- - start symbol - ->

  <!- -
  Expr ::= LocationPath end;
  - ->

  LocationPath ::= RelativeLocationPath
                 | AbsoluteLocationPath;

  AbsoluteLocationPath ::= slash RelativeLocationPath
                         | slashslash RelativeLocationPath
                         | slash ;

  RelativeLocationPath ::= RelativeLocationPath slash Step
                         | RelativeLocationPath slashslash Step
                         | Step;

  Step ::= AxisSpecifier NodeTest 
         | AbbreviatedStep ;
  <!- - AxisSpecifier NodeTest PredicateList - ->

  AxisSpecifier ::= axisName
                  | at
                  | ;

  AbbreviatedStep ::= dot 
                    | dotdot;

  NodeTest ::= NameTest
             | NodeType;

  NodeType ::= node
             | text
             | comment
             | processingInstruction;

  NameTest ::= ncname;
  -->

</grammar>
